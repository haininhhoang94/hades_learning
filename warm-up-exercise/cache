 Sure, here's an example of filtering a NumPy 2D array by a certain condition
that uses a function:

```python
import numpy as np

# Define the function to use for filtering
def is_positive(x):
    return x > 0

# Define the 2D array
arr = np.array([[1, -2, 3], [-4, 5, -6], [7, -8, 9]])

# Apply the function to the array to create a boolean mask
mask = np.vectorize(is_positive)(arr)

# Filter the array using the boolean mask
filtered_arr = arr[mask]

# Print the original array and the filtered array
print("Original array:")
print(arr)
print("Filtered array:")
print(filtered_arr)
```

 In this example, we define a function `is_positive()` that returns `True` if a
given value is positive and `False` otherwise. We then define a 2D NumPy array
`arr` and apply the `is_positive()` function to it using `np.vectorize()`, which
returns a boolean mask indicating which elements of the array satisfy the
condition. Finally, we use the boolean mask to filter the original array and
create a new array `filtered_arr` containing only the elements that satisfy the
condition.
